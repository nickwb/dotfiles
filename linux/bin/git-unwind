#!/usr/bin/bash

# "Unwind a branch".
# Once a branch has been merged to master, run this to make the local repository clean again.
# First checks that the current branch is not ahead of master. Will abort if it isn't.
# Prunes remote branches (so, delete your upstream branches once they are merged and finalised.)
# Switches to master, and deletes the local branch that you were on previously.
# Fast-forwards master to origin/master. 

DIR_GIT_STATUS=`git status -s`;

if [ $? -ne 0 ]; then
    exit 1;
fi

if [[ -n "$DIR_GIT_STATUS" ]]; then
	echo "You have uncommitted changes or a dirty working tree. Aborting.";
	git status -s;
	exit 1;
fi;

TARGET_BRANCH=$1;
if [[ -z "$TARGET_BRANCH" ]]; then
	TARGET_BRANCH=`git mbr`;
fi;

BRANCH=`git symbolic-ref --short -q HEAD`;

if [ "$BRANCH" != "$TARGET_BRANCH" ]; then
	echo "Pulling remote changes...";
	git fetch --prune origin;
	HEADREV=`git rev-parse HEAD`;
	BASEREV=`git merge-base HEAD origin/$TARGET_BRANCH`;

	if [ "$HEADREV" == "$BASEREV" ]; then
		echo "Great; $BRANCH is on $TARGET_BRANCH. Unwinding...";
		CONTINUE=1;
	else
		echo "$BRANCH is ahead of $TARGET_BRANCH.";
		CONTINUE=0;
	fi;

	if [ "$1" == "-f" ]; then
		echo "Continuing anyway, as -f was specified.";
		CONTINUE=1;
	fi;

	if [ $CONTINUE -eq 1 ]; then
		git checkout $TARGET_BRANCH;
		git merge origin/$TARGET_BRANCH --ff-only;
		git branch -D $BRANCH;
		echo ""
		echo "Unwind complete. Deleted: $BRANCH."
		echo "Here's what you missed:"
		echo ""
		git log --oneline $HEADREV~1..$TARGET_BRANCH
	else
		echo "Aborting. You can force with gitunwind -f."
	fi;
else
	echo "You're on $TARGET_BRANCH. Nothing to unwind!";
	echo "Will update instead.";
	git pull --prune;
fi;